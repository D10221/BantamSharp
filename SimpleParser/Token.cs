using System.Globalization;


namespace SimpleParser
{
    /// <summary>
    /// A simple token class. These are generated by Lexer and consumed by Parser.
    /// </summary>
    public class Token<TTokenType >: IToken<TTokenType>
    {
        public Token(TTokenType type, string text)
        {
            mType = type;
            mText = text;
        }

        public TTokenType TokenType
        {
            get { return mType; }
        }

        public string GetText()
        {
            return mText;
        }

        public override string ToString()
        {
            return mText;
        }

        private readonly TTokenType mType;
        
        private readonly string mText;

        public static IToken<TTokenType> New(TTokenType tokenType, string text)
        {
            return new Token<TTokenType>(tokenType, text);
        }

        public static IToken<TTokenType> New(TTokenType tokenType, char c)
        {
            return New(tokenType, c.ToString(CultureInfo.InvariantCulture));
        }

        public static IToken<TTokenType> Empty()
        {
            return New(default(TTokenType), null);
        }

        public bool HasValue
        {
            get { return !Equals(TokenType, default(TTokenType)); }
        }
        
        public bool IsEmpty
        {
            get { return Equals(TokenType, default(TTokenType)); }
        }
    }
}