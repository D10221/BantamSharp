


using System;

namespace SimpleParser
{
    public class Token
    {
        public static IToken<T> New<T>(T tokenType, string text) where T: Enum
        {
            return new Token<T>(tokenType, text);
        }
    }
    /// <summary>
    /// A simple token class. These are generated by Lexer and consumed by Parser.
    /// </summary>
    public class Token<TTokenType> : IToken<TTokenType> where TTokenType: Enum
    {
        public Token(TTokenType type, string text)
        {
            TokenType = type;
            Text = text;
        }

        public TTokenType TokenType { get; }

        public string Text {get;}

        public override string ToString()
        {
            return Text;
        }

        public static IToken<TTokenType> Empty()
        {
            return new Token<TTokenType>(default, null);
        }

        public bool HasValue
        {
            get { return !Equals(TokenType, default(TTokenType)); }
        }

        public bool IsEmpty
        {
            get { return Equals(TokenType, default(TTokenType)); }
        }
    }
}