
namespace SimpleParser
{
    public class Token
    {
        public static IToken<T> From<T>(T tokenType, ITokenSource source)
        {
            return new Token<T>(tokenType, source);
        }
        public static IToken<T> From<T>(T tokenType, string text)
        {
            return new Token<T>(tokenType, text);
        }

        public static IToken<T> Empty<T>(T empty = default, object value = null)
        {
            return new Token<T>(default, value);
        }
    }
    /// <summary>
    /// A simple token class. These are generated by Lexer and consumed by Lexer/Parser.
    /// </summary>
    public class Token<TTokenType> : IToken<TTokenType>
    {
        public Token(TTokenType type, object value)
        {
            TokenType = type;
            Value = value;
        }

        public TTokenType TokenType { get; }

        public object Value { get; }

        public override string ToString()
        {
            return Value?.ToString();
        }

        public bool IsEmpty
        {
            get { return Equals(TokenType, default(TTokenType)); }
        }
    }
}